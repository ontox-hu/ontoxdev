[
  {
    "path": "posts/2022-03-12-attention-models-and-transfer-learning-for-document-review/",
    "title": "Model every sysrev",
    "description": "Attention and transfer learning for millions of labels.",
    "author": [
      {
        "name": "Thomas Luechtefeld",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-12T22:58:34-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-03-12-automating-title-abstract-discovery/",
    "title": "Automating Title Abstract Discovery",
    "description": "`srmodel::tiab` automates titles/abstracts extraction from html.",
    "author": [
      {
        "name": "Thomas Luechtefeld",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-12T22:51:52-05:00",
    "input_file": {}
  },
  {
    "path": "posts/connecting-to-ontox4j/",
    "title": "Connecting to ontox4j",
    "description": "Connect and query the ontox4j graph database. TODO don't use distill",
    "author": [
      {
        "name": "Marc A.T. Teunis, Ph.D. & Tom Luechtefeld",
        "url": {}
      }
    ],
    "date": "2022-03-12",
    "categories": [],
    "contents": "\nInstall & Connect\nWe need neo4j for python, R doesn’t have an active driver. So we use reticulate:\nInstall reticulate install.packages(\"reticulate\")\nCreate a conda environment reticulate::conda_install()\nInstall neo4j pip install neo4j\nConnect to ontox4j with the python driver. First install reticulate\n\n\nneo4j  <- reticulate::import(\"neo4j\")\n\n\n\nThen use the very simple python driver wrapper below. We can add this to an eventual package ():\n\nfrom neo4j import GraphDatabase\nclass ontox4j_driver: \n  \n    def __init__(self, uri, user, password):\n        self.driver = GraphDatabase.driver(uri, auth=(user, password))\n\n    def close(self):\n        self.driver.close()\n\n    def query(self,query):\n        with self.driver.session() as session:\n            tx   = session.begin_transaction()\n            return [row for row in tx.run(query)]\n\nCreate some proteins\nOntox4j already has a few chemical relationships. Create a cypher query to view them.\n\n\ncon = reticulate::py$ontox4j_driver(Sys.getenv(\"ontox4j_uri\"),Sys.getenv(\"ontox4j_usr\"),Sys.getenv(\"ontox4j_pw\"))\n\n\ncreate_node  = \\(tag,...){ # Create nodes\n  node    = list(...)[-1]\n  keyvals = glue::glue(\"{names(node)}:'{node}'\") |> paste(collapse=\",\")\n  query   = glue::glue(\"CREATE (x:{tag} {{ {keyvals} }}) RETURN x\")\n  con$query(query)[[1]]\n}\n\nnodes     = list(\n  RALDH2    = create_node(\"Protein\" ,name=\"RALDH2\",type=\"enzyme\",uniprot=\"094788\"),\n  RDH10     = create_node(\"Protein\", name='RDH10',type='enzyme',uniprot='Q8IZV5'),\n  VIT_A_ext = create_node(\"Compound\",name='Vitamin A_e',type=\"vitamin\",pubchem_cid=\"445354\",location=\"extracellular\"),\n  VIT_A_int = create_node(\"Compound\",name='Vitamin A_i',type='vitamin',pubchem_cid='445354',location='intracellular'),\n  ATRA      = create_node(\"Compound\",name= 'ATRA',type= 'metabolite',pubchem_cid= '444795',location= 'intracellular'),\n  Retinald  = create_node(\"Compound\",name='Retinaldehyde',type='metabolite',pubchem_cid='638015'))\n\n\ncreate_edge = \\(rtag,tag1,name1,tag2,name2){ # create relationships TODO use create_edge(node1, \"relationship\", node2)\n  query = glue::glue(\"MATCH (n1:{tag1}),(n2:{tag2}) WHERE n1.name='{name1}' AND n2.name='{name2}'\n                     CREATE (n1)-[r:{rtag}]->(n2) \n                     RETURN n1, n2, r\")\n  con$query(query)\n}\n\n`vitai->rdh10` = create_edge(\"metabolizes\",\"Compound\",\"Vitamin A_i\",\"Protein\",\"RDH10\")\n`vitae->rdh10` = create_edge(\"translocates\",\"Compound\",\"Vitamin A_e\",\"Protein\",\"STRA6\")\n\n`vitai->reti`  = create_edge(\"is_converted_to\",\"Compound\",\"Vitamin A_i\",\"Compound\",\"Retinaldehyde\")\n`vitae->vitai` = create_edge(\"translocated_from\",\"Compound\",\"Vitamin A_e\",\"Compound\",\"Vitamin A_i\")\n\n`raldh->reti`  = create_edge(\"metabolizes\",\"Protein\",\"RALDH2\", \"Compound\",\"Retinaldehyde\")\n\n\n\nquery the results\n\n\nnodes = con$query(\"MATCH (n) RETURN n\") |> purrr::map(~ .$data()$n) |> \n  purrr::transpose() |> tibble::as_tibble() |> \n  tidyr::unnest(everything())\n\n# TODO some work to do here\nedges = con$query(\"MATCH (n) MATCH (n)-[r]->(m) RETURN n,r,m;\")\n\n\n\nclean up\n\n\ncon$query(\"MATCH (n) DETACH DELETE n\") # This doesn't work, not sure why.\n\n\nlist()\n\ncon$close()\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-13T22:48:09-04:00",
    "input_file": {}
  },
  {
    "path": "posts/project-predictions-and-pmids/",
    "title": "Predictions and pmids",
    "description": "project-predictions-and-pmids",
    "author": [
      {
        "name": "Thomas Luechtefeld",
        "url": {}
      }
    ],
    "date": "2022-02-28",
    "categories": [],
    "contents": "\nSysrev creates machine learning models for every review. Sometimes it is useful to combine mdoel predictions with article data to create new reviews. Here we do that for pubmed, but the concepts are generalizable. We will use the Sysrev project jian-jiang/AOP updating vub steatosis for this example:\nHow to link sysrev article ids to pubmed ids?**\n`external_id` is used to track external document identifiers for sysrev articles:\n\n\naop <- rsr::get_articles(103067) |> \n  select(project_id,aid,datasource_name,external_id) \n\nknitr::kable(head(aop))\n\n\nproject_id\naid\ndatasource_name\nexternal_id\n103067\n13591692\npubmed\n“24151358”\n103067\n13591690\npubmed\n“23236639”\n103067\n13591691\npubmed\n“23978457”\n103067\n13591698\npubmed\n“25560223”\n103067\n13591699\npubmed\n“26276582”\n103067\n13591697\npubmed\n“24523126”\n\nThe first article can be found at sysrev.com/p/103067/article/13591692 and also at https://pubmed.ncbi.nlm.nih.gov/24151358/.\nFiltering with machine learning\nBoth of these projects have predictions generated by Sysrev machine learning.\n\n\naop.pred.raw  <- rsr::get_predictions(103067)\n\n# get the most recent predictions\naop.pred = aop.pred.raw |> \n  group_by(project_id) |> \n  filter(predict_run_id==max(predict_run_id)) \n\naop.pred |> \n  select(project_id,predict_run_id,lid,value,probability) |> \n  print(n=2)\n\n\n# A tibble: 164,300 × 5\n# Groups:   project_id [1]\n  project_id predict_run_id lid                      value probability\n       <int>          <int> <chr>                    <chr>       <dbl>\n1     103067          27277 412b8a66-7b92-4554-b543… Dire…       0.502\n2     103067          27277 412b8a66-7b92-4554-b543… Dire…       0.511\n# … with 164,298 more rows\n\nFiltering with predict_run_id==max(predict_run_id) in each project gives us the most recent predictions in each project. Now we can join with the labels defined in each project:\n\n\naop.lbl <- rbind(\n  rsr::get_labels(103067),\n  rsr::get_labels(113583)) |> \n  select(lid,short_label)\n\n# TODO, this vignette is incomplete come back and finish it\naop.pred |> \n  inner_join(aop.lbl,by=\"lid\") |> \n  filter(short_label==\"Include\") |> \n  select(project_id,aid,short_label,value,probability)\n\n\n# A tibble: 13,144 × 5\n# Groups:   project_id [1]\n   project_id      aid short_label value probability\n        <int>    <int> <chr>       <chr>       <dbl>\n 1     103067 13592066 Include     TRUE        0.391\n 2     103067 13592227 Include     TRUE        0.512\n 3     103067 13591910 Include     TRUE        0.431\n 4     103067 13592023 Include     TRUE        0.351\n 5     103067 13592090 Include     TRUE        0.575\n 6     103067 13592080 Include     TRUE        0.448\n 7     103067 13592069 Include     TRUE        0.428\n 8     103067 13592079 Include     TRUE        0.536\n 9     103067 13592077 Include     TRUE        0.544\n10     103067 13592070 Include     TRUE        0.594\n# … with 13,134 more rows\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-12T23:04:50-05:00",
    "input_file": {}
  }
]
